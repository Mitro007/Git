
Syntax : git <sub-command> <arguments>


-> git init : to initialize a GIT repository (creates .git folder)

-> git config --list : to list all defined configurations
      -> git config user.name : prints username
      -> git config user.email : prints email id

-> git config --global user.name <user_name>
   git config --global user.email <user_email>
   
-> git config --local user.name <user_name>
   git config --local user.email <user_email>

-> git config --global/--local --list : list global/local configurations

-> git clone <url> : to clone the GIT repository

-> git status : gives information about tracked files as well as untracked files.

-> git ls-files : print all tracked files (files in staged area)

-> git add <files> : add one or more files to staging area

-> git commit -m(--message) <commit_message>

-> git commit -am <commit_message> : for tracked files this command is enough to make a commit

-> git log : lists all the commits in the current branch, with the latest commit at the top, followed by its parent on the top, and so on.
      
    Flags :
        (a). --abbrev-commit : displays enough characters to uniquely identify a commit
        (b). --pretty=oneline : to not display author and time
        (c). --all : displays commit history of all the branches in the repository
        (d). --graph : displays commit history as a graph (* -> commit, | -> pointer to parent commit, DAG -> Directed Acyclic Graph)
        (e). --oneline : equivalent to --abbrev-commit '+' --pretty=oneline
      
    git log <file_name> : to display commit history of specified file    


-> git branch : to list all the branches
    git branch <branch_name> : to create a new branch from current_branch
    git switch <branch_name> : to switch to specified branch
    git checkout -b <branch_name> : to create a new branch & switch to it
    git branch -d <branch_name> : to delete a remote/local branch

-> git reflog

-> git checkout : idsplays names of files that contain unstaged changes

    git checkout . : discard unstaged changes in all the tracked files
    git checkout -- <file_name> : to discard 'unstaged changes' in specified 'tracked file'

-> git <sub-command> --help / git help <sub-command> : documentation of specified sub-command

-> git config --global core.editor "code -w" : use VS Code as default editor

-> git diff : compares the version that Git has in its index with the version of the file in the working directory i.e by 
   default Git compares the Index with the working directory.
      
    Flags :
        (a). --cached/--staged : to compare index and the local repository

    git diff <file_name> : compare specified file in index & working directory   
    git diff <branch_name_1> <branch_name_2> : to compare two branches  
    git diff <commit_id_1> <commit_id_2> : to compare two commits 

-> git show <commit_id> : 'information about'/'contents of' the specified commit

    git show HEAD~2 : contents of 3rd last commit

-> git reset :

    git reset <file_name> : to move specified file from Staging area to unstaged(working directory)
    git reset <mode> <commit_id> : HEAD points to specified commit & all commits after this are deleted from local repository

      Flags/Mode :
        (a). --mixed : It is the default mode. Removes specified commit_id changes from Local repository & Staging area
        (b). --soft : Removes specified commit_id changes only from Local repository
        (c). --hard : Removes specified commit_id changes from Local repository, Staging area, and Working directory    

-> git stash : unstaged changes are stored in a secret location (as a commit inside .git/ref/stash folder)

-> git stash list : list all stashed changes (stash_id => stash@{0}, stash@{1}, .....)

-> git show <stash_id> : displays the content of specifed stash

-> git stash apply <stash_id> : adds changes in specifed stash_id to staging area & corresponding stash entry won't be deleted
   from stash collection, hence can be used again & again

-> git stash pop <stash_id> : adds changes in mentioned stash_id to working directory & removes mentioned stash from stashes 
   collection

-> git stash -p 

-> git stash clear : to delete all available stashes

-> git stash drop <stash_id> : deletes mentiond stash

-> git clone <url> : copies files & commit history of remote repository to local repository

-> git fetch : to check whether updates are available or not in remote repository & syncs local Git repository with remote Git repository
   (e.g. whenever we create a remote branch, our local Git repository won't be aware of it & switching to that remote brance will error out. So we first need
    to sync out local Git repo & remot Git repo by running command 'git fetch' & then change/switch to that branch
      git fetch && fit checkout <branch_name>
   )

-> git pull : merges the updates present in remote repository to local repository

-> git revert <commit_id> : Git creates a new commit containing the contents of the parent commit of mentioned commit.

-> git cherry-pick <commit_id> : 
